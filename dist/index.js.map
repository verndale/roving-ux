{"version":3,"file":"index.js","sources":["../index.js"],"sourcesContent":["const KEYCODE = {\n  END: 35,\n  HOME: 36,\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n};\n\nconst state = new Map();\n\nexport const rovingIndex = ({\n  element: rover,\n  target: selector,\n  callback: cb,\n}) => {\n  // this api allows empty or a query string\n  const target_query = selector || \":scope *\";\n  const targets = rover.querySelectorAll(target_query);\n  const startingPoint = targets[0];\n\n  // take container out of the focus flow\n  rover.tabIndex = -1;\n  // and all the children\n  targets.forEach((a) => (a.tabIndex = -1));\n  // except the first target, that accepts focus\n  startingPoint.tabIndex = 0;\n\n  // with the roving container as the key\n  // save some state and handy references\n  state.set(rover, {\n    targets,\n    active: startingPoint,\n    index: 0,\n  });\n\n  // when container or children get focus\n  const onFocusin = (_) => {\n    if (state.get(\"last_rover\") == rover) return;\n\n    activate(rover, state.get(rover).active);\n    state.set(\"last_rover\", rover);\n  };\n  rover.addEventListener(\"focusin\", onFocusin);\n\n  // watch for arrow keys\n  const onKeydown = (e) => {\n    switch (e.keyCode) {\n      case KEYCODE.RIGHT:\n      case KEYCODE.DOWN:\n        e.preventDefault();\n        focusNextItem(rover, cb);\n        break;\n      case KEYCODE.LEFT:\n      case KEYCODE.UP:\n        e.preventDefault();\n        focusPreviousItem(rover, cb);\n        break;\n      case KEYCODE.HOME:\n        e.preventDefault();\n        focusFirstItem(rover, cb);\n        break;\n      case KEYCODE.END:\n        e.preventDefault();\n        focusLastItem(rover, cb);\n        break;\n    }\n  };\n  rover.addEventListener(\"keydown\", onKeydown);\n\n  const cleanup = (_) => {\n    rover.removeEventListener(\"focusin\", onFocusin);\n    rover.removeEventListener(\"keydown\", onKeydown);\n    rover.removeEventListener(\"DOMNodeRemoved\", cleanup);\n\n    state.delete(rover);\n    targets.forEach((a) => (a.tabIndex = \"\"));\n  };\n\n  rover.addEventListener(\"DOMNodeRemovedFromDocument\", cleanup);\n};\n\nconst focusFirstItem = (rover, cb) => {\n  const rx = state.get(rover);\n\n  // set state index\n  rx.index = 0;\n\n  // use rover index state to find next\n  let first = rx.targets[rx.index];\n\n  // found something, activate it\n  next && activate(rover, first, cb);\n};\n\nconst focusLastItem = (rover, cb) => {\n  const rx = state.get(rover);\n\n  // set state index\n  rx.index = rx.targets.length - 1;\n\n  // use rover index state to find next\n  let last = rx.targets[rx.index];\n\n  // found something, activate it\n  next && activate(rover, last, cb);\n};\n\nconst focusNextItem = (rover, cb) => {\n  const rx = state.get(rover);\n\n  // increment state index\n  rx.index += 1;\n\n  // clamp navigation to target bounds\n  if (rx.index > rx.targets.length - 1) rx.index = rx.targets.length - 1;\n\n  // use rover index state to find next\n  let next = rx.targets[rx.index];\n\n  // found something, activate it\n  next && activate(rover, next, cb);\n};\n\nconst focusPreviousItem = (rover, cb) => {\n  const rx = state.get(rover);\n\n  // decrement from the state index\n  rx.index -= 1;\n\n  // clamp to 0 and above only\n  if (rx.index < 1) rx.index = 0;\n\n  // use rover index state to find next\n  let prev = rx.targets[rx.index];\n\n  // found something, activate it\n  prev && activate(rover, prev, cb);\n};\n\nconst activate = (rover, item, cb) => {\n  const rx = state.get(rover);\n\n  // remove old tab index item\n  rx.active.tabIndex = -1;\n\n  // trigger callback, set new active item and focus it\n  cb && cb(item);\n  rx.active = item;\n  rx.active.tabIndex = 0;\n  rx.active.focus();\n};\n"],"names":["state","Map","activate","rover","item","cb","rx","get","active","tabIndex","focus","element","callback","targets","querySelectorAll","target","startingPoint","forEach","a","set","index","onFocusin","_","addEventListener","onKeydown","e","keyCode","preventDefault","length","next","focusNextItem","prev","focusPreviousItem","focusFirstItem","focusLastItem","cleanup","removeEventListener"],"mappings":"AAAA,IASMA,EAAQ,IAAIC,IAmIZC,EAAW,SAACC,EAAOC,EAAMC,GAC7B,IAAMC,EAAKN,EAAMO,IAAIJ,GAGrBG,EAAGE,OAAOC,UAAY,EAGtBJ,GAAMA,EAAGD,GACTE,EAAGE,OAASJ,EACZE,EAAGE,OAAOC,SAAW,EACrBH,EAAGE,OAAOE,6BA3Ie,gBAChBP,IAATQ,QAEUN,IAAVO,SAIMC,EAAUV,EAAMW,mBALtBC,QAIiC,YAE3BC,EAAgBH,EAAQ,GAG9BV,EAAMM,UAAY,EAElBI,EAAQI,QAAQ,SAACC,UAAOA,EAAET,UAAY,IAEtCO,EAAcP,SAAW,EAIzBT,EAAMmB,IAAIhB,EAAO,CACfU,QAAAA,EACAL,OAAQQ,EACRI,MAAO,IAIT,IAAMC,EAAY,SAACC,GACbtB,EAAMO,IAAI,eAAiBJ,IAE/BD,EAASC,EAAOH,EAAMO,IAAIJ,GAAOK,QACjCR,EAAMmB,IAAI,aAAchB,KAE1BA,EAAMoB,iBAAiB,UAAWF,GAGlC,IAAMG,EAAY,SAACC,GACjB,OAAQA,EAAEC,SACR,KA3CG,GA4CH,KA3CE,GA4CAD,EAAEE,iBA0DY,SAACxB,EAAOE,GAC5B,IAAMC,EAAKN,EAAMO,IAAIJ,GAGrBG,EAAGc,OAAS,EAGRd,EAAGc,MAAQd,EAAGO,QAAQe,OAAS,IAAGtB,EAAGc,MAAQd,EAAGO,QAAQe,OAAS,GAGrE,IAAIC,EAAOvB,EAAGO,QAAQP,EAAGc,OAGzBS,GAAQ3B,EAASC,EAAO0B,EAAMxB,GAtExByB,CAAc3B,EAAOE,GACrB,MACF,KAlDE,GAmDF,KAlDA,GAmDEoB,EAAEE,iBAqEgB,SAACxB,EAAOE,GAChC,IAAMC,EAAKN,EAAMO,IAAIJ,GAGrBG,EAAGc,OAAS,EAGRd,EAAGc,MAAQ,IAAGd,EAAGc,MAAQ,GAG7B,IAAIW,EAAOzB,EAAGO,QAAQP,EAAGc,OAGzBW,GAAQ7B,EAASC,EAAO4B,EAAM1B,GAjFxB2B,CAAkB7B,EAAOE,GACzB,MACF,KAxDE,GAyDAoB,EAAEE,iBAuBa,SAACxB,EAAOE,GAC7B,IAAMC,EAAKN,EAAMO,IAAIJ,GAGrBG,EAAGc,MAAQ,EAMXS,MAAQ3B,EAASC,EAHLG,EAAGO,QAAQP,EAAGc,OAGKf,GAhCzB4B,CAAe9B,EAAOE,GACtB,MACF,KA7DC,GA8DCoB,EAAEE,iBAgCY,SAACxB,EAAOE,GAC5B,IAAMC,EAAKN,EAAMO,IAAIJ,GAGrBG,EAAGc,MAAQd,EAAGO,QAAQe,OAAS,EAM/BC,MAAQ3B,EAASC,EAHNG,EAAGO,QAAQP,EAAGc,OAGKf,GAzCxB6B,CAAc/B,EAAOE,KAI3BF,EAAMoB,iBAAiB,UAAWC,GAWlCrB,EAAMoB,iBAAiB,6BATP,SAAVY,EAAWb,GACfnB,EAAMiC,oBAAoB,UAAWf,GACrClB,EAAMiC,oBAAoB,UAAWZ,GACrCrB,EAAMiC,oBAAoB,iBAAkBD,GAE5CnC,SAAaG,GACbU,EAAQI,QAAQ,SAACC,UAAOA,EAAET,SAAW"}